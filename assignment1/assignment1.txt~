
PART 1:
1) The "lb" instruction with the format '$rs, imm' is a pseudo instruction.
The two machine codes that are used to achieve it's function are: "lui $rs, 4097"
and "lb $rs, offset(base)".

2) The value of register $t3 after the 'add $t3, $t2, $t3' line is 0x00000026 or 38.
This is because the value of $t3 is set to the value of $t0 + $t1, which 
is set to be 6 + 12 = 18. Then the value of $t3 is set to $t3 + $t2, which evaluates
to 18 + 20 = 38. 

3) The value of stored at this location is '3c'. If we were to convert this to an ascii
character, it would be the "<" character. 

4) The value of the label "Str" is stored at memory location 0x10010004, in the
last two positions of the memory. The address reads "0x44434241", but our "A" 
character is the last two digits of the hex number - That is, 41, which corresponds
to the Ascii character for A, which is 0x41.

5) Without the 'syscall' instruction, the assembler will not not when to end 
execution, and will attempt to execute lines that do not have instructions. leading
to an error or exception being thrown. 

PART 2:

1) The program's ouput was not as desired. When printing the string at location message, the 
program would print the entire conents of the .data block. Including the second ascii sring
at location exra. The solution to this error was to change the type of message from .ascii
to .asciiz. This adds a termination character to the end of the sring, allowing the proper 
output to be generated. 


PART 3:

1) The program can be fixed by changing the assignment of location "number" from type .space to type .word in 
the .data segment. The error that is given is "Exception 5 [Address error in store] occured and ignored"
Xspim gives the error that there is an unaligned address at 0x1001001e, and that an exception occured at 
pc=0x00400030. By changing the type of number to a word, rather than space, the assembler is able to assign
the correct address size, and location to each label.

2) The program has tried to store a word at the address following the first data space, which was address
0x1001001f. Because the previous address was not aligned to  a word memory, attempting to store a word lead 
to an exception being thrown. The program has stored no hex values on the unfixed program, as the sw function
has failed.

3) The program has stored the sring "abcdefg" at memory addresses 0x10010000 to 0x10010006 in the space that
has been set aside in the .data segment between 0x10010000 to 0x10010010


Part 4:

The program that was presented had several errors. The first and most obvious one, was that the representation of the ASCII character was appearing as
a decimal rather than a Hex value in register $t1. 



